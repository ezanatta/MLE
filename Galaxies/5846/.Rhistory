?hexbinning
??hexbinning
??hexagonalbins
??hexagonal
install.packages("spatstat")
library("spatstat", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("fMultivar")
library("fMultivar", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
?spatstat
source('~/astro-estatistica/spatstat.R')
par(mfrow=c(1,1))
par(mfrow=c(1,1))
N       <- 50                            # n<-- úmero de estrelas da amostra
PATTERN <- 1                             # 1 = distribuição gaussiana bivariada
# 2 = múltiplas distribuições gaussianas bivariadas
# 3 = processo POISSÔNICO (CSR)
MARGEM  <- 0.05                          # margem para a área de estudo.
if (PATTERN == 1) {
position <- rnorm2d(N, rho=0.5)                 # <-- (1) distribuição gaussiana bivariada, centrada em (0,0)
}
if (PATTERN == 2) {
position1 <- rnorm2d((N-30), rho=0.6)            # <-- (2) três distribuições gaussianas bivariadas.
position1[,1] <- position1[,1] -5
position1[,2] <- position1[,2] +4
position2 <- rnorm2d(15, rho=-0.2)
position3 <- rnorm2d(15, rho=0.01)
position3[,1] <- position3[,1] -4
position3[,2] <- position3[,2] +0
position  <- rbind(rbind(position1, position2), position3)
}
if (PATTERN == 3) {
position <- data.frame(runif(N),runif(N))        # <-- (3) distribuição uniforme
}
magB     <- runif(N, min=11., max=16.)  # <-- gera magnitudes B, aleatórias
magV     <- runif(N, min=10, max=14)    # <-- gera magnitudes V, aleatórias
color    <- magB-magV                   # <-- calcula cores (B-V)
View(position)
plot(position, xlab="X", ylab="Y", main="Fig.1 - Spatial Point Pattern")  # <-- visualizando
myData <- data.frame(X=position[,1], Y=position[,2], B=magB, V=magV, COLOR=color)  # <-- monta um data.frame
View(myData)
xmin <- min(myData$X)
xmax <- max(myData$X)
ymin <- min(myData$Y)
ymax <- max(myData$Y)
dx <- xmax - xmin           # <-- intervalos em x e y.
dy <- ymax - ymin
xmin <- xmin - dx * MARGEM    # <-- adicionando uma margem de -/+ 10% do intervalo
xmax <- xmax + dx * MARGEM
ymin <- ymin - dy * MARGEM
ymax <- ymax + dy * MARGEM
myPattern <- ppp(myData$X, myData$Y, c(xmin,xmax), c(ymin,ymax), marks=myData[,3:5] )
plot.ppp(myPattern, main="Fig.2 - Spatial Point Pattern", use.marks = FALSE)
plot.ppp(myPattern, main="Fig.3a - Spatial Point Pattern", use.marks = TRUE)  # Todas
plot.ppp(myPattern, main="Fig.3b - Spatial Point Pattern", use.marks = TRUE,
which.marks="V")
plot.ppp(myPattern, main="Fig.3d - Spatial Point Pattern", use.marks = TRUE,
which.marks="COLOR", legend=TRUE)
info <- summary(myPattern)
print(info)
plot( density(myPattern) )
plot( density(myPattern, edge=FALSE), main="Density (WITHOU edge correction)")  # <-- sem correção de borda.
plot( density(myPattern) )                                     # <-- forma mais simples de chamar
plot( density(myPattern), main="Density (sigma=1.0)")           #
plot( density(myPattern, 0.8), main="Density (sigma=0.8)")     #
plot( density(myPattern, 0.5), main="Density (sigma=0.5)")     #
plot( density(myPattern, 0.3), main="Density (sigma=0.3)")     #
plot( density(myPattern, 0.1), main="Density (sigma=0.1)")     #
plot( density(myPattern, 0.01), main="Density (sigma=0.01)")   #
plot( density(myPattern, 0.1), main="Density (sigma=0.1)")     #
plot( density(myPattern, 0.3), main="Density (sigma=0.3)")     #
lot( myPattern, use.marks=FALSE, add=TRUE)
plot( myPattern, use.marks=FALSE, add=TRUE)
plot( Kest(myPattern) )
plot( Kest(myPattern, correction="all") )
plot( envelope(myPattern, Kest) )
source('~/astro-estatistica/spatstat.R')
source('~/astro-estatistica/spatstat.R')
setwd("~/MLE/Galaxies/5846")
cat = read.table('N5846GC.dat')
RA = cat$V1
RA = cat$V2
DEC = cat$V3
V = cat$V4
g = cat$V5
i = cat$V6
color = g-i
color
hist(color, freq=FALSE)
lines(density(color))
library("mclust", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:mclust", unload=TRUE)
library("mixtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
est = normalmixEM(color)
plot(est, whichplots = 2)
plot(est, whichplots = 2, main='NGC5846 GC color distribution', xlab2='(g-i)')
plot(est, whichplots = 2, main2 ='NGC5846 GC color distribution', xlab2='(g-i)')
summary(est)
est
summary(est)
c_sep = 0.82
for(item in color){
if(item < c_sep){
print(item)
}
}
for(item in color){
if(item > c_sep){
print(item)
}
}
V
max(V)
min(V)
max(V)-500
min(V)+500
min(V)+300
max(V)-300

plot(df1$x, rstd1, xlab="x", ylab="Standard Residuals", main="Standarlized Residuals",
plot(df1$x, rstd1, xlab="x", ylab="Standard Residuals", main="Standarlized Residuals",
ylim=c(-max(rstd1), max(rstd1)))
plot(df1$x, rstd1, xlab="x", ylab="Standard Residuals", main="Standarlized Residuals",
ylim=c(-max(rstd1), max(rstd1)))
abline(0,0)
abline(-1,0, col='blue'); abline(+1,0, col='blue')
abline(-2,0, col='red'); abline(+2,0, col='red')
plot(fit1, which=1)
plot(fit1, which=3)
hist(rstd1, freq=FALSE, main="Std. Residuals Histogram x Normal Distribution", xlim=c(-4,4))
curve(dnorm, col='blue', add=TRUE)
qqnorm(rstd1)        # Normal Q-Q Plot
qqline(rstd1, col='red')
source('~/astro-estatistica/residuo1.R')
source('~/astro-estatistica/residuo1.R')
source('~/astro-estatistica/residuo1.R')
source('~/astro-estatistica/residuo1.R')
source('~/astro-estatistica/residuo1.R')
.noise
source('~/astro-estatistica/residuo2.r')
source('~/astro-estatistica/Aula_17.R')
source('~/.active-rstudio-document')
par(mfrow=c(3,1))
T2 = 3600. * 10
NOISE_LEVEL = 0.0
# Gerando uma curva de luz com uma única componente sinusoidal (freq=1000uHz, A=0.1, Tmax=0)
lc1 <- synthetic_light_curve(t1=0, t2=T2, dt=5, freq=1000e-6, Ampl=0.1, Tmax=0, sigma=NOISE_LEVEL)
plot(lc1, type='l', main="1 componente")
abline(0,0, col="blue")
comp2 = data.frame( c(1000.e-6, 1100.e-6), c(0.20, 0.10), c(0,500) )
lc2 <- synthetic_light_curve(t1=0, t2=T2, dt=5, df.comp=comp2, sigma=NOISE_LEVEL)
plot(lc2, type='l', main="2 componentes")
abline(0,0, col="blue")
comp3 = data.frame( c(1000.e-6, 1100.e-6, 1800.e-6), c(0.20, 0.10, 0.05), c(0,500,200) )
lc3 <- synthetic_light_curve(t1=0, t2=T2, dt=5, df.comp=comp3, sigma=NOISE_LEVEL)
plot(lc3, type='l', main="3 componentes")
abline(0,0, col="blue")
par(mfrow=c(3,1))
NOISE_LEVEL = 0.2
# Gerando uma série temporal somente com ruído:
lc0 <- synthetic_light_curve(t1=0, t2=T2, dt=5, freq=0, Ampl=0, Tmax=0, sigma=NOISE_LEVEL)
plot(lc0, type='l', main="Apenas Ruído")
abline(0,0, col="blue")
# Gerando uma curva de luz com uma única componente sinusoidal (freq=1000uHz, A=0.1, Tmax=0)
lc1 <- synthetic_light_curve(t1=0, t2=T2, dt=5, freq=1000e-6, Ampl=0.1, Tmax=0, sigma=NOISE_LEVEL)
plot(lc1, type='l', main="1 componente")
abline(0,0, col="blue")
# Gerando uma série com três componentes:
#                     |<-----frequências----------->|  |<-- amplitudes-->|  |<---Tmax-->|
comp3 = data.frame( c(1000.e-6, 1100.e-6, 1800.e-6), c(0.20, 0.10, 0.05), c(0,500,200) )
lc3 <- synthetic_light_curve(t1=0, t2=T2, dt=5, df.comp=comp3, sigma=NOISE_LEVEL)
plot(lc3, type='l', main="3 componentes")
abline(0,0, col="blue")
?dft
source('~/astro-estatistica/dft.R')
par(mfrow=c(2,1))
# Gerando uma série temporal somente com ruído:
lc0 <- synthetic_light_curve(t1=0, t2=T2, dt=5, freq=0, Ampl=0, Tmax=0, sigma=0.2)
dft0 <- dft(lc0$Time, lc0$Y, f1=0, f2=2000.e-6)
dft0$Frequency <- dft0$Frequency / 1.e-6
plot(dft0, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="DFT Periodogram (NOISE)", ylim=c(0,0.1))
# Gerando uma série temporal somente com ruído:
lc0 <- synthetic_light_curve(t1=0, t2=T2, dt=5, freq=0, Ampl=0, Tmax=0, sigma=1.0)
dft0 <- dft(lc0$Time, lc0$Y, f1=0, f2=2000.e-6)
dft0$Frequency <- dft0$Frequency / 1.e-6
plot(dft0, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="DFT Periodogram (NOISE)", ylim=c(0,0.1))
par(mfrow=c(2,1))
NOISE_LEVEL = 1.5
# Gerando uma série com três componentes:
#                     |<-----frequências----------->|  |<-- amplitudes-->|  |<---Tmax-->|
comp3 = data.frame( c(1000.e-6, 1100.e-6, 1800.e-6), c(0.20, 0.10, 0.05), c(0,500,200) )
lc3 <- synthetic_light_curve(t1=0, t2=T2, dt=5, df.comp=comp3, sigma=NOISE_LEVEL)
plot(lc3, type='l', main="3 componentes")
abline(0,0, col="blue")
dft3 <- dft(lc3$Time, lc3$Y, f1=500.e-6, f2=2000.e-6)
dft3$Frequency <- dft3$Frequency / 1.e-6
plot(dft3, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="DFT Periodogram", ylim=c(0,0.3))
text(1000,0.25, "f1"); text(1100,0.25,"f2"); text(1800,0.25,"f3")
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
par(mfrow=c(2,1))
NOISE_LEVEL = 0.1
# Série 1:
T2a = 3600 * 12     # <-- 10 horas
lc1 <- synthetic_light_curve(t1=0, t2=T2a, dt=10, df.comp=comp3, sigma=NOISE_LEVEL)
dft1 <- dft(lc1$Time, lc1$Y, f1=500.e-6, f2=2000.e-6)
dft1$Frequency <- dft1$Frequency / 1.e-6
plot(dft1, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="Série Temporal Longa", ylim=c(0,0.3))
text(1000,0.25, "f1"); text(1100,0.25,"f2"); text(1800,0.25,"f3")
# Série 2:
T2b = 3600 * 5      # <-- alterar aqui
lc2 <- synthetic_light_curve(t1=0, t2=T2b, dt=10, df.comp=comp3, sigma=NOISE_LEVEL)
dft2 <- dft(lc2$Time, lc2$Y, f1=500.e-6, f2=2000.e-6)
dft2$Frequency <- dft2$Frequency / 1.e-6
plot(dft2, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="Série Temporal Curta", ylim=c(0,0.3))
text(1000,0.25, "f1"); text(1100,0.25,"f2"); text(1800,0.25,"f3")
vPeaks <- getPeaks(dft3)
Amed   <- mean(vPeaks$Amplitude)
abline(3*Amed,0, col="red")
abline(4*Amed,0, col="blue")
par(mfrow=c(2,1))
NOISE_LEVEL = 1.5
# Gerando uma série com três componentes:
#                     |<-----frequências----------->|  |<-- amplitudes-->|  |<---Tmax-->|
comp3 = data.frame( c(1000.e-6, 1100.e-6, 1800.e-6), c(0.20, 0.10, 0.05), c(0,500,200) )
lc3 <- synthetic_light_curve(t1=0, t2=T2, dt=5, df.comp=comp3, sigma=NOISE_LEVEL)
plot(lc3, type='l', main="3 componentes")
abline(0,0, col="blue")
dft3 <- dft(lc3$Time, lc3$Y, f1=500.e-6, f2=2000.e-6)
dft3$Frequency <- dft3$Frequency / 1.e-6
plot(dft3, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="DFT Periodogram", ylim=c(0,0.3))
text(1000,0.25, "f1"); text(1100,0.25,"f2"); text(1800,0.25,"f3")
source('~/astro-estatistica/getPeaks.r')
vPeaks <- getPeaks(dft3)
Amed   <- mean(vPeaks$Amplitude)
abline(3*Amed,0, col="red")
abline(4*Amed,0, col="blue")
abline(Amed,0, col="yellow")
par(mfrow=c(2,1))
NOISE_LEVEL = 0.1
# Série 1:
T2a = 3600 * 12     # <-- 10 horas
lc1 <- synthetic_light_curve(t1=0, t2=T2a, dt=10, df.comp=comp3, sigma=NOISE_LEVEL)
dft1 <- dft(lc1$Time, lc1$Y, f1=500.e-6, f2=2000.e-6)
dft1$Frequency <- dft1$Frequency / 1.e-6
plot(dft1, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="Série Temporal Longa", ylim=c(0,0.3))
text(1000,0.25, "f1"); text(1100,0.25,"f2"); text(1800,0.25,"f3")
T2b = 3600 * 5      # <-- alterar aqui
lc2 <- synthetic_light_curve(t1=0, t2=T2b, dt=10, df.comp=comp3, sigma=NOISE_LEVEL)
dft2 <- dft(lc2$Time, lc2$Y, f1=500.e-6, f2=2000.e-6)
dft2$Frequency <- dft2$Frequency / 1.e-6
plot(dft2, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="Série Temporal Curta", ylim=c(0,0.3))
text(1000,0.25, "f1"); text(1100,0.25,"f2"); text(1800,0.25,"f3")
par(mfrow=c(2,1))
NOISE_LEVEL = 0.1
# Série 1:  12 horas contínuas.
duracao1 <- 3600 * 12
tbeg1 <- 0
tend1 <- tbeg1 + duracao1
lc1 <- synthetic_light_curve(t1=tbeg1, t2=tend1, dt=10, df.comp=comp3, sigma=NOISE_LEVEL)
dft1 <- dft(lc1$Time, lc1$Y, f1=500.e-6, f2=2000.e-6)
dft1$Frequency <- dft1$Frequency / 1.e-6
plot(dft1, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="Série temporal SEM gap", ylim=c(0,0.3))
text(1000,0.25, "f1"); text(1100,0.25,"f2"); text(1800,0.25,"f3")
# Série 2: duas partes separadas por um gap; cada parte tem metade da duração da Série 1;
duracao2 <- duracao1 / 2        # <-- duração de cada parte;
gap <- 3600 * 12                        # <-- duração do GAP (**ALTERAR AQUI**)
tbeg2a <- 0                     # <-- tempo de início da 1a. parte;
tend2a <- tbeg2a + duracao2     # <-- tempo de fim da 1a. parte;
tbeg2b <- tend2a + gap          # <-- tempo de início da 2a. parte;
tend2b <- tbeg2b + duracao2     # <-- tempo de fim da 2a. parte;
lc2a <- synthetic_light_curve(t1=tbeg2a, t2=tend2a, dt=10, df.comp=comp3, sigma=NOISE_LEVEL)  # <-- 1a. parte
lc2b <- synthetic_light_curve(t1=tbeg2b, t2=tend2b, dt=10, df.comp=comp3, sigma=NOISE_LEVEL)  # <-- 2a. parte
lc2 <- rbind(lc2a, lc2b)   # <-- juntando as duas partes.
dft2 <- dft(lc2$Time, lc2$Y, f1=500.e-6, f2=2000.e-6)
dft2$Frequency <- dft2$Frequency / 1.e-6
plot(dft2, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="Série temporal COM gap", ylim=c(0,0.3))
text(1000,0.25, "f1"); text(1100,0.25,"f2"); text(1800,0.25,"f3")
par(mfrow=c(2,1))
NOISE_LEVEL = 0.1
# Série: duas partes separadas por uma interrupção.
duracao1 <- 3600 * 12
gap <- 3600 * 12                # <-- duração do GAP (**ALTERAR AQUI**)
tbeg1 <- 0
tend1 <- tbeg1 + duracao1
duracao2 <- duracao1 / 2        # <-- duração de cada parte;
tbeg2a <- 0                     # <-- tempo de início da 1a. parte;
tend2a <- tbeg2a + duracao2     # <-- tempo de fim da 1a. parte;
tbeg2b <- tend2a + gap          # <-- tempo de início da 2a. parte;
tend2b <- tbeg2b + duracao2     # <-- tempo de fim da 2a. parte;
lc2a <- synthetic_light_curve(t1=tbeg2a, t2=tend2a, dt=10, df.comp=comp3, sigma=NOISE_LEVEL)  # <-- 1a. parte
lc2b <- synthetic_light_curve(t1=tbeg2b, t2=tend2b, dt=10, df.comp=comp3, sigma=NOISE_LEVEL)  # <-- 2a. parte
lc2 <- rbind(lc2a, lc2b)   # <-- juntando as duas partes.
dft2 <- dft(lc2$Time, lc2$Y, f1=500.e-6, f2=2000.e-6)
dft2$Frequency <- dft2$Frequency / 1.e-6
plot(dft2, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="Série temporal COM gap", ylim=c(0,0.3))
text(1000,0.25, "f1"); text(1100,0.25,"f2"); text(1800,0.25,"f3")
# 1 - obtenha os tempos da séire original:
vtime <- lc2$Time
# 2 - defina frequência, amplitude, fase. Embora os valores sejam arbitrários,
#     é conveninente fazer Amplitude=1 (para facilitar escalonamentos),
#     Tmax=0 e a frequência de acordo com o intervalo escolhido.
fwin    <- 1500e-6         # <-- poderia ser 1000uHz, por exemplo.
Awin    <- 1
Tmaxwin <- 0
# 3 - gere uma série sintética, SEM ruído:
vy <- Awin * sin(2*pi*fwin * (vtime - Tmaxwin) + pi/2)        # <-- SIMPES !!!!!!
# 4 - calcule a DFT:
dft_win <- dft(vtime, vy, f1=500.e-6, f2=2000.e-6)
dft_win$Frequency <- dft_win$Frequency / 1.e-6
# 5 - plotando o periodograma:
plot(dft_win, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="Spectral Window", ylim=c(0,1.1))
# 0 - plotando o espectro a ser analizado:
dft2 <- dft(lc2$Time, lc2$Y, f1=500.e-6, f2=2000.e-6)
dft2$Frequency <- dft2$Frequency / 1.e-6
plot(dft2, type='l', xlab="Frequency (uHz)", ylab="Amplitude (ma)", main="Série temporal COM gap") #, ylim=c(0,0.3))
text(1000,0.25, "f1"); text(1100,0.25,"f2"); text(1800,0.25,"f3")
# 1 - copiando as janelas espectrais
dft_win1 <- dft_win   # f1
dft_win2 <- dft_win   # f2
dft_win3 <- dft_win   # f3
# 2 - deslocando em frequência:
dft_win1$Frequency <- dft_win1$Frequency - 500    # <-- (já está em uHz)
dft_win2$Frequency <- dft_win2$Frequency - 400
dft_win3$Frequency <- dft_win3$Frequency + 300
# 3 - escalonando em amplitude:
dft_win1$Amplitude <- dft_win1$Amplitude * 0.20
dft_win2$Amplitude <- dft_win2$Amplitude * 0.10
dft_win3$Amplitude <- dft_win3$Amplitude * 0.05
# plotando as janelas espectrais:
lines(dft_win1$Frequency, dft_win1$Amplitude, type='l', col="red")
lines(dft_win2$Frequency, dft_win2$Amplitude, type='l', col="blue")
lines(dft_win3$Frequency, dft_win3$Amplitude, type='l', col="green")
par(mfrow=c(2,1))
# gerando um ciclo retangular:
vt <- seq(1,20,1)
vy <- c( rep(+1,10), rep(-1,10))
#plot(vt,vy, type='l')
freq <- 1./20   # 0.05 Hz = 50 mHz
# repetindo ciclo várias vezes:
Ncycles <- 20
vtok <-vector()
vyok<- vector()
for (i in 1:Ncycles) {
dt = 20 * (i-1)
vtok <- c(vtok, (vt+dt))
vyok <- c(vyok, vy)
}
plot(vtok, vyok, type='l', xlab="Time (sec)", ylab="Intensity", mai="Retangular Time Series")
# calculando a DFT:
dft_ret <- dft(vtok, vyok, f1=0, f2=500e-3)
dft_ret$Frequency <- dft_ret$Frequency / 1.e-3
plot(dft_ret, type='l', xlab="Frequency (mHz)", ylab="Amplitude (ma)", main="Periodograma", ylim=c(0,1.5))
text(50,1.4, "fo"); text(150,0.6,"3*fo"); text(250,0.4, "5*fo"); text(350,0.35, "7*fo"); text(450,0.3, "9*fo")
install.packages("bootstrap")
mean(6, 5.5, 5.5, 4.5)
mean(6, 5.5, 5,5, 4.5)
mean(6, 5.5, 5, 5, 4.5)
x = c(6, 5.5, 5, 5, 4.5)
mean(x)
C_best <- 299792.458
clim <- c(299750, 299840)
cdata <- c(299802, 299756, 299813, 299795, 299796, 299803, 299789)
cmean <-  mean(cdata)
csd   <- sd(cdata)
C_best <- 299792.458
# E
clim <- c(299750, 299840)  # <-- limtes da velocidade para futuros histogramas. 20
# A princípio, pode parecer que tudo o que podemos fazer é calcular a média e o
# desvio padrão da média:
cdata <- c(299802, 299756, 299813, 299795, 299796, 299803, 299789)
cmean <-  mean(cdata)
csd   <- sd(cdata)
cat("\n\n Light Speed (direct): ", cmean, " +/- ",csd, "\n\n")   # <-- monta a linha de saida...
plot(cdata, ylim=clim, xlab="Measure Index", ylab="Velocity (km/s)", main="Light Speed Measures")
abline(cmean,0, col="blue")        # <-- média
abline(cmean-1*csd,0, col="green")  # <-- média - 1*sigma
abline(cmean+1*csd,0, col="green")  # <-- média + 1*sigma
abline(cmean-2*csd,0, col="red")  # <-- média - 2*sigma
abline(cmean+2*csd,0, col="red")  # <-- média + 2*sigma
#
cat(" ===================================================================================\n")
cat(" 1. --- Jackknife\n")
cat(" ===================================================================================\n")
N <- length(cdata)
vc <- vector()   # <-- criando um VETOR VAZIO para armazenar as médias dos subsets.
for (k in 1:N) {
# Existem diferentes maneiras de fazer o "subseting" em R.
# cdata[2:4]             <-- retorna os valores com índices entre 2 e 4.
# cdata[-2]              <-- retorna todos os valores, EXCETO, o de índice 2.
csub <- cdata[-k]      # <-- gera o subset SEM o elemento k.
# calculando a média do subset atual:
csubmed <- mean(csub)
# armazenando a média no vetor vc:
vc <- c(vc, csubmed)
# mostrando os resultados para o subset atual:
cat(" k=", k, "--> (", csub, ")  mean: ", csubmed, "\n")
}
cjack    <- mean(vc)
cjack_sd <- sd(vc) * (N-1) / sqrt(N)
cat("\n Light Speed (Jackknife) : ", cjack, " +/-",cjack_sd, "\n")   # <-- output
cat(" Houve alguma alteração? Na média? Na incerteza? \n")
library("bootstrap", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
theta <- function(v) {mean(v)}
o <- jackknife(cdata, theta)
cat(" Resultado de jackknife(): ", cmean, " +/-", o$jack.se, "\n\n")
o
cat(" ===================================================================================\n")
cat(" 2. --- Bootstrap\n")
cat(" ===================================================================================\n")
source('~/astro-estatistica/Aula_15.R')
?qt
?bootstrap
x <- rnorm(50, 10, 0.1)
x
xm = mean(x)
xsd = sd(x)
x95 = xm+qt(0.95, 49)*sqrt(var(x)/50)
x95
sd(x)/sqrt(50)
x = rnorm(1000)
x
plot(x)
plot(x, exp(x))
plot(x, exp(-x))
plot(x, exp(-x^1/4))
plot(x, exp(-4*x^1/4))
plot(x, exp(-4*(x/3)^1/4))
plot(x, exp(-4*(x/3)^1/4))
plot(x, exp(-4*(x/3)^1/1))
plot(x, exp(-4*(x/3)^1/10))
plot(x, exp(-4*(x/3)^1/4))
plot(x, 0.4*exp(-4*(x/3)^1/4))
plot(x, 0.4*exp(-4*(x/5000)^1/4))
bn = (1.9992*4-0.3271)
bn
plot(x, 0.4*exp(-7.6*(x/5000)^1/4))
plot(x, 0.4*exp(-7.6*((x/5000)^1/4-1)))
plot(x, 0.4*exp(-7.6*((x/50)^1/4-1)))
plot(x, 0.4*exp(-7.6*((x/5)^1/4-1)))
plot(x, 0.4*exp(-7.6*((x/0.1)^1/4-1)))
plot(x, 0.4*exp(-7.6*((x/0.6)^1/4-1)))
plot(x, 0.4*exp(-7.6*((x/10)^1/4-1)))
plot(x, 0.4*exp(-7.6*((x/130)^1/4-1)))
plot(x, 0.4*exp(-7.6*(((x/130)^1/4)-1)))
plot(x, 0.4*exp(-7.6*(((x/130)^1/4))))
plot(x, 0.4*exp(-7.6*(((x/130)^1/4)-1)))
??logplot
plot(x, 0.4*exp(-7.6*(((x/130)^1/4)-1)), log='xy')
plot(x, 0.4*exp(-7.6*(((x/5000)^1/4)-1)), log='xy')
y = 0.4*exp(-7.6*(((x/5000)^1/4)-1))
y
y = -2.5*log10(y)
y
plot(x, y)
min(x)
max(x)
x = seq(0,10000,100)
x
plot(x, y)
y.size
size(y)
length(y)
length(x)
x = seq(0,10000,1000)
length(x)
x = seq(0,10000,10)
length(x)
x = x-x[1]
x
length(x)
x = seq(0,10000,10)
x.remove(x[1])
plot(x, 0.4*exp(-7.6*(((x/130)^1/4)-1)))
plot(x, 0.4*exp(-7.6*(((x/5000)^1/4)-1)))
plot(x, 0.4*exp(-7.6*(((x/5000)^1/0.8)-1)))
plot(x, 0.4*exp(-7.6*(((x/5000)^1/4)-1)))
plot(x, 0.00004*exp(-7.6*(((x/5000)^1/4)-1)))
plot(x, 0.00004*exp(-7.6*(((x/5000000)^1/4)-1)))
plot(x, 0.00004*exp(-7.6*(((x/5000)^1/4)-1)))
plot(x, 0.00004*exp(-7.6*(((x/149)^1/4)-1)))
plot(x, 0.00004*exp(-7.6*(((x/149)^1/0.22)-1)))
plot(x, 0.00004*exp(-7.6*(((x/149)^1/4)-1)))
plot(x, 15*exp(-7.6*(((x/149)^1/4)-1)))
plot(x, 15000*exp(-7.6*(((x/149)^1/4)-1)))
plot(x, 1500*exp(-7.6*(((x/149)^1/4)-1)))
plot(x, -2.5*log10(1500*exp(-7.6*(((x/149)^1/4)-1))))
plot(x, -2.5*log10(15*exp(-7.6*(((x/149)^1/4)-1))))
plot(x, log10(15*exp(-7.6*(((x/149)^1/4)-1))))
plot(x, log10(15*exp(-7.6*(((x/149)^1)-1))))
plot(x, log10(15*exp(-7.6*(((x/149)^1/4)-1))))
plot(x, -log10(15*exp(-7.6*(((x/149)^1/4)-1))))
plot(x, log10(15*exp(-7.6*(((x/149)^1/4)-1))))
plot(x, -2.5*log10(15*exp(-7.6*(((x/149)^1/4)-1))))
y = -2.5*log10(15*exp(-7.6*(((x/149)^1/4)-1)))
y
y = -2.5*log10(17*exp(-7.6*(((x/150)^1/4)-1)))
x
x = seq(0, 1000000, 10000)
x
y = -2.5*log10(17*exp(-7.6*(((x/150)^1/4)-1)))
y
x = seq(0, 10, 100)
x
x = seq(0, 100, 10)
x
y = -2.5*log10(17*exp(-7.6*(((x/150)^1/4)-1)))
y
plot(x, y)
y = (17*exp(-7.6*(((x/150)^1/4)-1)))
plot(x, y)
y = (17*exp(-7.6*(((x/1500)^1/4)-1)))
plot(x, y)
y = (17*exp(-7.6*(((x/6)^1/4)-1)))
plot(x, y)
y = (17*exp(-7.6*(((x/11)^1/4)-1)))
plot(x, y)
y = (17*exp(-7.6*(((x/12)^1/4)-1)))
plot(x, y)
y = (17*exp(-7.6*(((x/15)^1/4)-1)))
plot(x, y)
x = seq(0, 300, 10)
y = (17*exp(-7.6*(((x/15)^1/4)-1)))
plot(x, y)
y = (107*exp(-7.6*(((x/15)^1/4)-1)))
plot(x, y)
y = (107*exp(-7.6*(((x/150)^1/4)-1)))
plot(x, y)
y = log10(107*exp(-7.6*(((x/150)^1/4)-1)))
plot(x, y)
y
y = log10(5000*exp(-7.6*(((x/150)^1/4)-1)))
y
y = log10(5000*exp(-7.6*(((x/15000)^1/4)-1)))
y
y = log10(5000*exp(-7.6*(((x/15000000000,)^1/4)-1)))
y = log10(5000*exp(-7.6*(((x/15000000000)^1/4)-1)))
y
y = log10(5000*exp(-7.6*(((x/150)^1/4)-1)))
y
y = log10(5000*exp(-7000000*(((x/150)^1/4)-1)))
y
y = log10(5000*exp(-7000*(((x/150)^1/4)-1)))
y
y = log10(5000*exp(-70*(((x/150)^1/4)-1)))
y
y = log10(500*exp(-7.6*(((x/150)^1/4)-1)))
y
source('~/HAWKI/products-inter-combine/bimodal.r')
zk
?write.table
system2('pwd')
gzbins(RA, DEC, 5, zkpure, set_bins=FALSE, dummybins)
RA
DEC
dummybins = list()
RA = corr_cat$V1
DEC = corr_cat$V2
RA = RA[-mw]
DEC = DEC[-mw]
gzbins(RA, DEC, 5, zkpure, set_bins=FALSE, dummybins)
x = rnorm(1000)
y = 14.00+(2.5*7.67/log(10))*(((x/424.23)^1/4)-1)
plot(x, y)
x = rnorm(1000)
y = 14.00*(7.67)*(((x/424.23)^1/4)-1)
plot(x, y)
x = 0:800
y = 14.00*(7.67)*(((x/424.23)^1/4)-1)
plot(x,y)
plot.loglog(x,y)
plot(x,y log=(x,y))
plot(x,y, log=(x,y))
plot(x,y, log="x,y"
plot(x,y, log="x,y")
plot(x,y, log="y")
plot(x,y, log="x")
plot(x,-y, log="x")
plot(x,-y, log="x", lty='l')
plot(x,-y, log="x", lty='2')
plot(x,-y, log="x")
plot(x,-y, log="x", type='l')
plot(x,-y, log="x", type='l', xlab='R', ylab='expression(\mu_e)')
plot(x,-y, log="x", type='l', xlab='R', ylab='expression(mu_e)')
plot(x,-y, log="x", type='l', xlab='R', ylab='expression(mu)')
plot(x,-y, log="x", type='l', xlab='R', ylab=expression(mu))
plot(x,-y, log="x", type='l', xlab='R', ylab=I)
plot(x,-y, log="x", type='l', xlab='R', ylab='I')
par(1,3)
plot(x,-y, log="x", type='l', xlab='R', ylab='I')
plot(x,-y, log="x", type='l', xlab='R', ylab='I')
par(mfrow=c(1,3))
plot(x,-y, log="x", type='l', xlab='R', ylab='I')
x = 0:800
y = 14.69*(7.67)*(((x/328.95)^1/4)-1)
plot(x,-y, log="x", type='l', xlab='R', ylab='I')
x = 0:800
y = 22.70*(7.67)*(((x/222.23)^1/4)-1)
plot(x,-y, log="x", type='l', xlab='R', ylab='I')
setwd("~/MLE/Galaxies/3115")
cat = read.table('N3115GC.dat')
g = cat$V5
i = cat$V6
cat = read.table('N3115_f.GC.dat')
hist(cat)
f = cat$V1
hist(f)
hist(f, breaks=20)
hist(f, breaks=30)
hist(f, breaks=20)
hist(f, breaks=30)
hist(f, breaks=20)
hist(f, breaks=25)
hist(f, breaks=20)
hist(f, breaks=20, xlab=('Probability of being in the Spheroid'), freq=FALSE)
hist(f, breaks=20, xlab=('Probability of being in the Spheroid'), freq=FALSE, main=(''))
hist(f, breaks=20, xlab=('Probability of being in the Spheroid'), freq=FALSE, main=('3115'))
lines(density(f))
hist(f, breaks=20, xlab=('Probability of being in the Spheroid'), main=('3115'))
hist(f, breaks=20, xlab=('Probability of being in the Spheroid'), main=('NGC 3115'))
cat = read.table('N2768_f.GC.dat')
setwd("~/MLE/Galaxies/2768")
cat = read.table('N2768_f.GC.dat')
f = cat$V1
hist(f, breaks=20, xlab=('Probability of being in the Spheroid'), main=('NGC 2768'))
setwd("~/MLE/Galaxies/7457")
cat = read.table('N7457_f.GC.dat')
f = cat$V1
hist(f, breaks=20, xlab=('Probability of being in the Spheroid'), main=('NGC 2768'))
hist(f, breaks=20, xlab=('Probability of being in the Spheroid'), main=('NGC 7457'))
hist(f, breaks=20, xlab=('Probability of being in the Spheroid'), main=('NGC 7457'), freq=FALSE)
hist(f, breaks=20, xlab=('Probability of being in the Spheroid'), main=('NGC 7457'))

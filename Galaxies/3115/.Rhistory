string2 = paste0("fn", 1:30)
string1 = paste("label", 1:30)
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
x = xVec
y = yVec
ve1 = x - y
sin(yVec[-length(yVec)]) / cos(xVec[-1])
yVec[-length(yVec)
yVec[-length(yVec)]
ve2 = sin(y[-length(y)])/cos(x[-1])
ve2
ve3 = x[-length(x), -lenght(x)-1]
ve3 = x[-length(x), -length(x)-1]
ve3 = x[c(-length(x), -length(x)-1)]
ve3
ve3 = x[c(-length(x), -length(x)-1)]+x[c(-1, -length(x))]-x[c(-1,-2)]
j = 1:(length(x)-1)
j
soma6 = sum(exp(-x[j+1])/(x[j]+10))
?sort
for(item in y){
if(item < 600){
print(item)
}
}
?match
for(item in y){
if(item < 600){
print(match(item))
}
}
for(item in y){
if(item < 600){
print(match(item, y))
}
}
for(item in y){
if(item < 600){
match_y = append(match_y, match(item, y))
}
}
match_y = c(NULL)
match_x = c(NULL)
for(item in y){
if(item < 600){
match_y = append(match_y, match(item, y))
}
}
for(item in x){
if(item < 600){
match_x = append(match_x, match(item, x))
}
}
length(match_x)
length(match_y)
xVec[yVec>600]
matches = x[y>600]
gvec = sqrt(x-mean(x))
gvec
gvec = sqrt(abs(x-mean(x))
?abs
gvec = sqrt(abs(x-mean(x)))
gvec
sum( yVec>max(yVec)-200 )
sum( y >= max(y)-200 )
even = sum(x%%2==0)
even
sorted = x(order(y))
sorted = x[order(y)]
sorted
pick_y = y[seq(1,length(y), 3)]
pick_y
?cumprod
yVec[c(T,F,F)]
1+sum(cumprod(seq(2,38,b=2)/seq(3,39,b=2)))
seq(2,38,b=2
seq(2,38,b=2)
seq(3,39,2)
?matrix
matrix(x)
matrix(x, y)
x = rnorm(100)
y = rnorm(100)
matrix(x, y)
A = matrix(c(1, 5, -2),c(1, 2,1), c(3, 6, -3))
A
View(A)
A = matrix(c(1, 5, -2),c(1, 2,1), c(3, 6, -3), nrow=3, ncol=3)
A
A = matrix(c(1, 5, -2),c(1, 2,1), c(3, 6, -3))
A
A = matrix(a = c(1, 5, -2),b=c(1, 2,1), c= c(3, 6, -3))
A
A = matrix(a=c(1, 5, -2),b=c(1, 2, 1), c=c(3, 6, -3))
A = cbind(a=c(1, 5, -2),b=c(1, 2, 1), c=c(3, 6, -3))
A
if(A^3 == 0){print 'TRUE'}
A^3
A*A*A
A
A%*%A%*%A
( tmp <- matrix( c(1,5,-2,1,2,-1,3,6,-3),nr=3) )
A = cbind(c(1, 5, -2),c(1, 2, 1),c(3, 6, -3))
A
print(A%*%A%*%A)
A = cbind(c(1, 5, -2),c(1, 2, -1),c(3, 6, -3))
print(A%*%A%*%A)
A[,3] = A[,2]+A[,3]
A
B = cbind(rep(10, 15), rep(-10, 15), rep(10, 15))
B
t(B)
BtB = B_t%*%B
B_t = t(B)
BtB = B_t%*%B
BtB
crossprod(B)
matE = cbind(0, nrow=6, ncol=6)
matE
matE = cbind(data=0, nrow=6, ncol=6)
matE
matE = matrix(data=0, nrow=6, ncol=6)
matE
row(matE)
col(matE)
matE[abs(col(matE)-row(matE))==1 ] = 1
matE
?OUTER
?outer
outer(0:4, 0:4, '+')
outer(0:4, 0:4, '-')
outer(0:4, 0:4, '*')
??%%
%%
%%5
A%%5
A
A%o%5
A%*%5
A%%5
C1 = matE%%5
C1
C1 = out%%5
out = outer(c(0:4), c(0:4), '+')
C1 = out%%5
C1
c2 = outer(c(0:10), c(0:10), '+')%%10
c2
c2 = outer(c(0:9), c(0:10), '+')%%10
c2
c2 = outer(c(0:9), c(0:9), '+')%%10
c2
c3 = outer(c(0:8), c(8,0), '+')%%9
c3
c3 = outer(c(0:8), c(8:0), '+')%%9
c3
c3 = outer(c(0:9), c(9:0), '+')%%9
c3 = outer(c(0:9), c(9:0), '+')%%9
c3
c3 = outer(c(0:9), c(9:0), '+')%%8
c3
c3 = outer(c(0:9), c(9:0), '+')%%10
c3
c3 = outer(c(0:8), c(8:0), '+')%%9
c3
c3 = outer(c(0:8), c(8:0), '-')%%9
c3
c3 = outer(c(0:8), c(0:8), '-')%%9
c3
A = outer(c(0:5), c(0:5), '+')
A
A = outer(c(1:5), c(1:5), '+')
A
A = outer(c(1:5), c(1:5), '+')
A
A = matrix(data=0, nrow=5, ncol=5)
A = abs(col(A)-row(A))+1
A
A = matrix(data=0, nrow=5, ncol=5)
A = abs(col(A)-row(A))+1
b = c(7, -1, -3, 5, 17)
x = solve(A, b)
x
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
for(item in rows(aMat)){print(item)}
for(item in row(aMat)){print(item)}
for(item in aMat){print(item)}
for(item in aMat.row){print(item)}
for(item in aMat){print(item)}
attributes(aMat)
summary(aMat)
lines(aMat)
coumns(aMat)
columns(aMat)
column(aMat)
for(i in aMat){
if(i>4){
print i
}
}
for(i in aMat){
if(i>4){
print(i)
}
}
for(i in aMat){if(i>4){print(i)}}
?apply
which( apply(aMat,1,function(x){sum(x==7)==2}) )
?arr.ind
??arr.ind
?arr
?which
cols = colSum(aMat)
which(outer(cols, cols, '+')>7
cols = colSums(aMat)
which(outer(cols, cols, '+')>75
cols = colSums(aMat)
which(outer(cols, cols, '+')>75)
cols = colSums(aMat)
which(outer(cols, cols, '+')>75, arr.ind=TRUE)
outer(cols, cols, '+')
i = 1:20
j = 1:5
s1 = sum(i^4)*1/sum(3+j)
s1
s1 = sum(i^4)/sum(3+j)
s1
s1 = sum(i^4)/sum(1/(3+j))
s1
s1 = sum(i^4)*sum(1/(3+j))
s1
s2 = sum(i^4)*sum(1/(3+i*j))
s2
s2 = sum((i^4)*1/(3+i*j))
s2
s2 = sum((i^4)/(3+i*j))
s2
s2 = sum((i^4)/outer(i, j, "*"))
s2
s2 = sum((i^4)/(3+outer(i, j, "*")))
s2
#c)
for(i in 1:10){
print i
}
for(i in 1:10){
print(i)
}
s3 = 0
for(i in 1:10){
for(j in 1:i){
summ = i^4/(3+i*j)
s3 = s3 + summ
}
}
print(s3)
dev.copy(jpeg,filename=paste0(path_to_cat,'plots/voronoi', gal,'.jpg'))
library(deldir)
library(datautils)
#gal <- paste(readLines('~/MLE/2.3/current_galaxy.dat'), collapse=" ")
gal = 7457
path_to_cat = paste0('~/MLE/Galaxies/',gal, '/')
cat_name = paste0(path_to_cat, '/N',gal,'GC.dat')
cat = read.table(cat_name)
RA = cat$V2
DEC = cat$V3
V = cat$V4
g = cat$V5
i = cat$V6
color = g-i
df = data.frame(RA, DEC)
voronoi = deldir(df$RA, df$DEC)
rbPal <- colorRampPalette(c('blue','red'))
df$Col <- rbPal(10)[as.numeric(cut(V,breaks = 10))]
X11()
plot.deldir(voronoi, fill=df$Col, wlines='tess', wpoints='none', xlab='RA', ylab='DEC', main=paste0('NGC', gal))
dev.copy(jpeg,filename=paste0(path_to_cat,'plots/voronoi', gal,'.jpg'))
source('http://www.if.ufrgs.br/~costajes/Aula_residuals1.R')
source('~/astro-estatistica/residuo1.R')
plot(df1$x)
plot(fit1$residuals)
rstd1
attributes(rstd1)
fit1
?rstandard
?rstandard.lm
plot(df1$x, rstd1, xlab="x", ylab="Standard Residuals", main="Standarlized Residuals",
plot(df1$x, rstd1, xlab="x", ylab="Standard Residuals", main="Standarlized Residuals",
ylim=c(-max(rstd1), max(rstd1)))
plot(df1$x, rstd1, xlab="x", ylab="Standard Residuals", main="Standarlized Residuals",
ylim=c(-max(rstd1), max(rstd1)))
abline(0,0)
abline(-1,0, col='blue'); abline(+1,0, col='blue')
abline(-2,0, col='red'); abline(+2,0, col='red')
plot(fit1, which=1)
plot(fit1, which=3)
hist(rstd1, freq=FALSE, main="Std. Residuals Histogram x Normal Distribution", xlim=c(-4,4))
curve(dnorm, col='blue', add=TRUE)
qqnorm(rstd1)        # Normal Q-Q Plot
qqline(rstd1, col='red')
source('~/astro-estatistica/residuo1.R')
source('~/astro-estatistica/residuo1.R')
source('~/astro-estatistica/residuo1.R')
source('~/astro-estatistica/residuo1.R')
source('~/astro-estatistica/residuo1.R')
.noise
source('~/astro-estatistica/residuo2.r')
setwd("~/MLE/Galaxies/3115")
cat = readlines('N3115input.dat')
cat = readLines('N3115input.dat')
cat
cat[1]
c = read('digite')
cat = read.table('~/MLE/2.2/test_GCdensity-circularbins.dat')
cat
ro = cat$V3
r = cat$V8
ro
r
plot(ro, r)
B
B <- function(r){
srsc = mue*exp(-bn*((r/re)**(1/n)-1))
return(srsc)
}
D <- function(r){
exp = mud*exp(-r/h)
return(exp)
}
B
B(r)
### starting galaxy
gal = readline('Enter galaxy number: ')
#### initial parameters
input = readLines(paste0('N'+gal+'input.dat'))
mue = input[9]
mud = input[10]
bn = 2.0*n-0.327
re = input[7]
h = input[8]
n = input[6]
gal = readline('Enter galaxy number: ')
gal = readline('Enter galaxy number: ')
input = readLines(paste0('N'+gal+'input.dat'))
mue = input[9]
mud = input[10]
bn = 2.0*n-0.327
re = input[7]
h = input[8]
n = input[6]
paste0('N'+gal+'input.dat')
gal = str(gal)
input = readLines(paste0('N'+gal+'input.dat'))
gal
gal = readline('Enter galaxy number: ')
gal = str(gal)
gal
gal = paste(readline('Enter galaxy number: '))
gal
input = readLines(paste0('N'+gal+'input.dat'))
input = readLines(paste0('N',gal,'input.dat'))
input
mue = input[9]
mud = input[10]
bn = 2.0*n-0.327
re = input[7]
h = input[8]
n = input[6]
bn = 2.0*n-0.327
re
int(re)
strtoi(re)
re
Re = as.integer(re)
Re
Re = as.float(re)
Re = as.double(re)
Re
mue = as.double(input[9])
mud = as.double(input[10])
re = as.double(input[7])
h = as.double(input[8])
n = as.double(input[6])
bn = 2.0*n-0.327
B(r)
D(r)
Ub = B(r)
Ud = D(r)
plot(r, B(r))
plot(r, ro, add=TRUE)
plot(r, ro)
B <- function(r){
srsc = mue*exp(-bn*((r/re)^(1/n)-1))
srsc = -2.5*log10(srsc)
return(srsc)
}
Ub = B(r)
plot(r, B(r))
plot(r, ro)
plot(r, D(r))
Ud = D(r)
plot(r, D(r))
D <- function(r){
exp = mud*exp(-r/h)
exp = -2.5*log10(exp)
return(exp)
}
Ud = D(r)
plot(r, D(r))
plot(r, B(r))
fit = lm(ro ~ r)
fit
plot(fit)
plot(fit)
plot(fit)
fit = lm(Ub ~ r)
plot(fit)
fit = lm(Ud ~ r)
plot(fit)
library(MASS)
?fitdistr
ts(datVec, start=c(1960,3), frequency=12)
m = rep(NA, 10)
m
m = rep(NULL, n+1)
m
m = c(NULL)
m
m = append(m, m0)
m0=0
m = append(m, m0)
m
?start
?ts
source('~/astro-estatistica/lista4.R')
tsEwma
?tsp
tsDat = ts(rnorm(40000), start=c(1960, 3), frequency=12)
tsDat
tsp(tsDat)
s = tsp(tsDat)[1]
s
tsEwma_vec <- function(tsDat, m0=0, delta=0.7){
n = length(tsDat)
m = c(NULL)
m = append(m, m0)
for(i in 2:(n+1)){
m[i] = (1-delta)*tsDat[i-1]+delta*m[i-1]
}
s = tsp(tsDat)[1]
f = tsp(tsDat)[3]
time_serie = ts(m[-1], start=s, frequency=f)
}
source('~/astro-estatistica/lista4.R')
system.time(tsEwma(tsDat = tsDat))
system.time(tsEwma_vec(tsDat = tsDat))
source('~/astro-estatistica/lista4.R')
system.time(tsEwma_vec(tsDat = tsDat))
system.time(tsEwma_vec(tsDat = tsDat))
source('~/astro-estatistica/lista4.R')
system.time(tsEwma_vec(tsDat = tsDat))
tsDat = ts(rnorm(4000), start=(2016, 3), frequency=12)
source('~/astro-estatistica/lista4.R')
tsDat
system.time(tsEwma_vec(tsDat = tsDat))
system.time(tsEwma(tsDat = tsDat))
time_serie
tsEwma(tsDat = tsDat)
time_serie
tsEwma(tsDat = tsDat)
time_serie
time = tsEwma(tsDat)
time
system.time(tsEwma(tsDat = tsDat))
system.time(tsEwma_vec(tsDat = tsDat))
?rexp
source('~/astro-estatistica/lista4.R')
df = myFn(10)
source('~/astro-estatistica/lista4.R')
df = myFn(10)
attributes(rexp)
source('~/astro-estatistica/lista4.R')
df = myFn(10)
df
source('~/astro-estatistica/lista4.R')
df = myFn(10)
df
df = myFn(1000)
df
k = 0
df = myFn(1000)
df
source('~/astro-estatistica/lista4.R')
df
df = myFn(1000)
df
source('~/astro-estatistica/lista4.R')
lapply( rep(10,4), myListFn )
sapply( rep(10,4), myListFn )
lp = lapply( rep(10,1000), myListFn )
lp
myList = lapply( rep(10,1000), myListFn )
myList
ylp = myList[[y]]
ylp = myList$yvec
ylp
myList = lapply( rep(10,1000), myListFn )
ylp = myList$yvec
ylp
